from imports import *

class Display():
  '''Display object keeps track of plots and the ds9 interface.'''
  def __init__(self,nods9=False):
    '''Initialize the display object.'''
    if nods9 == False:
      self.ds9 = ds9()
      self.ds9.set('rotate to 90')
  def small(self):
    '''Create a small figure.'''
    try:
      plt.figure(self.smallfig.number)
    except:
      self.smallfig = plt.figure(figsize=(4,3), facecolor='white', edgecolor='white')

  def medium(self):
    '''Create a medium figure.'''
    try:
      plt.figure(self.mediumfig.number)
    except:
      self.mediumfig = plt.figure(figsize=(7,5), facecolor='white', edgecolor='white')

  def spectrum(self, keys):
    '''Create a spectrum plotting window.'''
    try:
      plt.sca(self.eax[0])
    except:
      efi, self.eax = plt.subplots(len(keys), 1, sharex=True)
      efi.subplots_adjust(hspace=0, wspace=0)
    return self.eax

  def large(self):
    '''Create a large plot.'''
    try:
      plt.figure(self.largefig.number)
    except:
      self.largefig = plt.figure(figsize=(10,10), facecolor='white', edgecolor='white')

  def ds9rgb(self, r, g, b, clobber=True):
    '''Display three images as RGB in ds9.'''
    if clobber:
      self.ds9.set("frame delete all")
    self.ds9.set("rgb")
    self.ds9.set("rgb red")
    self.ds9.set_np2arr(r.astype(np.float))
    self.ds9.set("rgb green")
    self.ds9.set_np2arr(g.astype(np.float))
    self.ds9.set("rgb blue")
    self.ds9.set_np2arr(b.astype(np.float))
    self.ds9.set("rgb red")

  def ds9many(self, inputimages, clobber=True):
    '''Display a bunch of images in ds9, each in its own frame.'''
    images = np.array(inputimages)
    if clobber:
      self.ds9.set("frame delete all")

    if len(images.shape) <= 2:
      self.one(images, clobber=clobber)
      return

    for i in range(images.shape[0]):
      self.ds9.set("frame {0}".format(i))
      self.ds9.set_np2arr(images[i].astype(np.float))

  def ds9one(self, image, clobber=False):
    '''Display one image in ds9, with option to empty all grames first.'''
    if clobber:
      self.ds9.set("frame delete all")
    self.ds9.set("frame new")
    self.ds9.set_np2arr(image.astype(np.float))

  def ds9replace(self, image, i):
    '''Replace the image in the a specific ds9 frame with a new one.'''
    self.ds9.set("frame {0}".format(i+1))
    self.ds9.set_np2arr(image.astype(np.float))


  def ds9update(self, image, clobber=False):
    '''Update the image in this frame with an updated one.'''
    self.ds9.set_np2arr(image.astype(np.float))
